from sblang_builtins import bulitins
COMMENT="""
/*
    Generated By SBLang2C.
*/
"""
class CompileError(BaseException):
    pass
class NameSpace:
    def __init__(self,static:dict,dynamic:dict):
        self.static,self.dynamic=static,dynamic
        self.names=list(static.keys())+list(dynamic.keys())

    def _topure(self,line:str):
        line.replace("  ","  ")
        line=line.lstrip(" ")
        if line.startswith("#"):
            return False
        if not line:
            return False
        return line
    def translate(self,runtime,line):
        line=self._topure(line)
        if not line:
            return False
        command=line.split(" ")[0]
        if command not in self.names:
            return 1
        #go ahead!
        if command in self.static.keys():
            cmdtype=0 #STATIC
        else:
            cmdtype=1 #DYNAMIC
        if cmdtype:
            return self.dynamic[command](runtime,line.split(" ",1))
        else:
            return self.static[command]

bulitins=NameSpace(
    bulitins[0],
    bulitins[1]
)
class Runtime:
    def __init__(self):
        self.heads,self.head,self.externs,self.functions,self.main=[],[],[],[],[]
        self.type_detector={}
    def translate(self,line):
        translated=bulitins.translate(self,line)
        if translated == False:
            return True
        if translated == 1:
            raise CompileError(f"Command Not Found: in line: {line}")
        if translated == None:
            return True
        self.main+=[translated]
    def export_final(self):
        final=COMMENT+"\n"
        for i in self.heads:
            final+=f"#include <{i}>\n"
        final+="\n".join(self.head+self.externs+self.functions+self.main)
        return final

    
